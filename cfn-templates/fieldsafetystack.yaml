Description: 'Field Safety Deployment Stack'

Parameters:
  CollaboratorFoundationModel:
    Type: String
    Default: "anthropic.claude-3-sonnet-20240229-v1:0"
    Description: "Foundation model for the collaborator agent"
    ConstraintDescription: "Collaborator foundation model is required"
    AllowedPattern: ".+"
    
  SupervisorFoundationModel:
    Type: String
    Default: "anthropic.claude-3-sonnet-20240229-v1:0"
    Description: "Foundation model for the supervisor agent"
    ConstraintDescription: "Supervisor foundation model is required"
    AllowedPattern: ".+"
    
  OpenWeatherApiKey:
    Type: String
    Description: "API key for OpenWeather service"
    NoEcho: true
    ConstraintDescription: "OpenWeather API key is required"
    AllowedPattern: ".+"

Resources:
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      TimeoutInMinutes: 60 
      Name:
        Fn::Sub: FieldSafetyCodeBuild-${AWS::StackName}
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        ComputeType: BUILD_GENERAL1_LARGE
        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: GITHUB_REPO
            Value: "https://github.com/panbishnoi/industrialai-workorder-management-demo.git"
          - Name: BUILD_TIMEOUT
            Value: "120"
          - Name: AWS_ACCOUNT_ID
            Value: !Sub '${AWS::AccountId}'
          - Name: AWS_REGION
            Value: !Sub '${AWS::Region}'
          - Name: STACK_ID
            Value: !Sub '${AWS::StackId}'
          - Name: OPENWEATHER_API_KEY
            Value: !Ref OpenWeatherApiKey
          - Name: COLLABORATOR_FOUNDATION_MODEL
            Value: !Ref CollaboratorFoundationModel
          - Name: SUPERVISOR_FOUNDATION_MODEL
            Value: !Ref SupervisorFoundationModel
      ServiceRole:
        Fn::GetAtt:
          - CodeBuildServiceRole
          - Arn
      Source:
        Type: NO_SOURCE
        BuildSpec: |
          version: 0.2
          env:
            variables:
              NEXT_TELEMETRY_DISABLED: "1"
          phases:
            install:
              runtime-versions:
                nodejs: 18
                python: 3.11
              commands:
                - echo "Installing dependencies..."
                - pip install --upgrade pip
                - pip install requests boto3
                - npm install -g aws-cdk
                - cdk --version
            pre_build:
              commands:
                - echo "Cloning repository..."
                - git clone $GITHUB_REPO
                - cd industrialai-workorder-management-demo
            build:
              commands:
                - export NODE_OPTIONS="--max_old_space_size=4096" # Increase Node.js memory limit
                - echo "Building project..."
                - cd cdk
                - pip install -r requirements.txt
                - aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws
                - cdk bootstrap aws://$AWS_ACCOUNT_ID/$AWS_REGION
                - cdk deploy --all --require-approval never --context openweather_api_key="$OPENWEATHER_API_KEY" --context collaborator_foundation_model="$COLLABORATOR_FOUNDATION_MODEL" --context supervisor_foundation_model="$SUPERVISOR_FOUNDATION_MODEL" --context skip_frontend_build=true
                - echo "Build completed successfully"
            post_build:
              commands:
                - echo "Deployment process completed"
          cache:
            paths:
              - .npm/**/*
              - node_modules/**/*
              - /root/.npm/**/*
              - /root/.cache/yarn/**/*
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: CDKBootstrapPermissions1
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: "*"
            Resource: "*"
  StepFunctionsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StepFunctionsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - "codebuild:StartBuild"
                - "codebuild:BatchGetBuilds"
                - "lambda:InvokeFunction"
                - "states:CreateStateMachine"
                - "states:DeleteStateMachine"
                - "states:DescribeStateMachine"
                - "states:StartExecution"
                - "states:StopExecution"
                - "states:DescribeExecution"
                - "states:GetExecutionHistory"
              Resource: 
                - !GetAtt CodeBuildProject.Arn
                - !GetAtt CFNResponseFunction.Arn
                - !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:*"
                - !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:execution:*"
        - PolicyName: StepFunctionsAdditionalPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - "events:PutRule"
                - "events:PutTargets"
                - "events:DescribeRule"
                - "events:DeleteRule"
                - "events:RemoveTargets"
                - "iam:PassRole"
                - "iam:GetRole"
              Resource: "*"
  BuildStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString: !Sub |
        {
          "Comment": "State machine for managing CodeBuild deployment",
          "StartAt": "StartBuild",
          "States": {
            "StartBuild": {
              "Type": "Task",
              "Resource": "arn:aws:states:::codebuild:startBuild.sync",
              "Parameters": {
                "ProjectName": "${CodeBuildProject}"
              },
              "Next": "CheckBuildStatus"
            },
            "CheckBuildStatus": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.Build.BuildStatus",
                  "StringEquals": "SUCCEEDED",
                  "Next": "Success"
                },
                {
                  "Variable": "$.Build.BuildStatus",
                  "StringEquals": "FAILED",
                  "Next": "Fail"
                }
              ],
              "Default": "Fail"
            },
            "Success": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${CFNResponseFunction.Arn}",
                "Payload": {
                  "RequestType.$": "$$.Execution.Input.RequestType",
                  "RequestId.$": "$$.Execution.Input.RequestId",
                  "StackId.$": "$$.Execution.Input.StackId",
                  "LogicalResourceId.$": "$$.Execution.Input.LogicalResourceId",
                  "PhysicalResourceId.$": "$.Build.Id",
                  "ResponseURL.$": "$$.Execution.Input.ResponseURL",
                  "ResourceType.$": "$$.Execution.Input.ResourceType",
                  "ResourceProperties.$": "$$.Execution.Input.ResourceProperties",
                  "Status": "SUCCESS",
                  "Data": {
                    "BuildId.$": "$.Build.Id",
                    "BuildArn.$": "$.Build.Arn",
                    "BuildStatus.$": "$.Build.BuildStatus"
                  }
                }
              },
              "End": true
            },
            "Fail": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${CFNResponseFunction.Arn}",
                "Payload": {
                  "RequestType.$": "$$.Execution.Input.RequestType",
                  "RequestId.$": "$$.Execution.Input.RequestId",
                  "StackId.$": "$$.Execution.Input.StackId",
                  "LogicalResourceId.$": "$$.Execution.Input.LogicalResourceId",
                  "PhysicalResourceId.$": "$.Build.Id",
                  "ResponseURL.$": "$$.Execution.Input.ResponseURL",
                  "ResourceType.$": "$$.Execution.Input.ResourceType",
                  "ResourceProperties.$": "$$.Execution.Input.ResourceProperties",
                  "Status": "FAILED",
                  "Data": {
                    "BuildId.$": "$.Build.Id",
                    "BuildArn.$": "$.Build.Arn",
                    "BuildStatus.$": "$.Build.BuildStatus",
                    "FailureReason.$": "States.Format('Build failed: {}', $.Build.Phases[?(@.PhaseStatus == 'FAILED')].Contexts[0].Message)"
                  }
                }
              },
              "End": true
            }
          }
        }
      RoleArn: !GetAtt StepFunctionsRole.Arn
  CFNResponseRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  CFNResponseFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: python3.11
      Role: !GetAtt CFNResponseRole.Arn
      Code:
        ZipFile: |
          import json
          import urllib3
          
          SUCCESS = "SUCCESS"
          FAILED = "FAILED"
          
          def send(event, context, response_status, response_data):
              # Extract Build object from response_data to pass through
              build_info = response_data.get('Build', {})
              
              response_body = {
                  'Status': response_status,
                  'Reason': 'See the details in CloudWatch Log Stream: ' + context.log_stream_name,
                  'PhysicalResourceId': event.get('PhysicalResourceId', context.log_stream_name),
                  'StackId': event['StackId'],
                  'RequestId': event['RequestId'],
                  'LogicalResourceId': event['LogicalResourceId'],
                  'Data': response_data,
                  # Add Build at the top level
                  'Build': build_info
              }
              
              http = urllib3.PoolManager()
              try:
                  response = http.request(
                      'PUT',
                      event['ResponseURL'],
                      body=json.dumps(response_body).encode('utf-8'),
                      headers={'Content-Type': 'application/json'}
                  )
                  print(f"Status code: {response.status}")
              except Exception as e:
                  print(f"Error sending response: {str(e)}")
                  raise
          
          def handler(event, context):
              try:
                  print(f"Received event: {json.dumps(event)}")
                  status = SUCCESS if event.get('Status') == 'SUCCESS' else FAILED
                  response_data = {
                      'BuildId': event.get('PhysicalResourceId'),
                      'Build': {
                          'buildStatus': event.get('Status', 'FAILED')
                      }
                  }
                  send(event, context, status, response_data)
              except Exception as e:
                  print(f"Error in handler: {str(e)}")
                  send(event, context, FAILED, {
                      'Error': str(e),
                      'Build': {
                          'buildStatus': 'FAILED'
                      }
                  })
  BuildTriggerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: StepFunctionsStartExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: states:StartExecution
                Resource: !Ref BuildStateMachine
  BuildTriggerLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: python3.11
      Role: !GetAtt BuildTriggerRole.Arn
      Environment:
        Variables:
          STATE_MACHINE_ARN: !GetAtt BuildStateMachine.Arn
      Code:
        ZipFile: |
          import boto3
          import json
          import os

          def handler(event, context):
              print(f"Received event: {json.dumps(event)}")  # Log the input
              
              if event.get('RequestType') != 'Delete':
                  sfn = boto3.client('stepfunctions')
                  
                  # Start the state machine with the CloudFormation custom resource event
                  response = sfn.start_execution(
                      stateMachineArn=os.environ['STATE_MACHINE_ARN'],
                      input=json.dumps(event)
                  )
                  print(f"Started execution: {response['executionArn']}")
              
              return {
                  'PhysicalResourceId': event.get('PhysicalResourceId', 'BuildTrigger')
              }
  BuildTrigger:
    Type: Custom::BuildTrigger
    DependsOn:
      - CodeBuildProject
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - BuildTriggerLambda
        - Arn
Outputs:
  DeploymentStatus:
    Description: Status of the deployment
    Value: !GetAtt BuildTrigger.BuildStatus
