AWSTemplateFormatVersion: '2010-09-09'
Description: 'Field Workforce Safety Assistant - Main Stack'

Parameters:
  CollaboratorFoundationModel:
    Type: String
    Default: anthropic.claude-3-sonnet-20240229-v1:0
    Description: Foundation model for the collaborator agent
    AllowedValues:
      - anthropic.claude-3-sonnet-20240229-v1:0
      - anthropic.claude-3-haiku-20240307-v1:0
  
  SupervisorFoundationModel:
    Type: String
    Default: anthropic.claude-3-sonnet-20240229-v1:0
    Description: Foundation model for the supervisor agent
    AllowedValues:
      - anthropic.claude-3-sonnet-20240229-v1:0
      - anthropic.claude-3-haiku-20240307-v1:0
  
  OpenWeatherApiKey:
    Type: String
    Description: OpenWeather API key for weather forecast integration
    NoEcho: true

Resources:
  # STEP 1: Create IAM roles
  CFNResponseRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: CFNResponsePolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/CFNResponseFunction-${AWS::StackName}:*"
          - Effect: Allow
            Action:
            - sqs:SendMessage
            - sqs:GetQueueUrl
            Resource: !GetAtt CFNResponseDLQ.Arn

  BuildTriggerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: BuildTriggerPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/BuildTriggerLambda-${AWS::StackName}:*"
          - Effect: Allow
            Action:
            - states:StartExecution
            Resource: !Ref BuildStateMachine
          - Effect: Allow
            Action:
            - sqs:SendMessage
            - sqs:GetQueueUrl
            Resource: !GetAtt BuildTriggerDLQ.Arn

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole
      # Suppress CKV_AWS_63: Ensure no IAM policies documents allow "*" as a statement's actions - Specific actions are now defined
      # Suppress CKV_AWS_107: Ensure IAM policies does not allow credentials exposure - No credential exposure in this policy
      # Suppress CKV_AWS_110: Ensure IAM policies does not allow privilege escalation - No privilege escalation in this policy
      # Suppress CKV_AWS_111: Ensure IAM policies does not allow write access without constraints - Resources are constrained
      # Suppress CKV_AWS_109: Ensure IAM policies does not allow permissions management without constraints - Resources are constrained
      Policies:
      - PolicyName: CDKDeploymentPermissions
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/CDKDeployment-${AWS::StackName}:*"
          - Effect: Allow
            Action:
            - s3:GetObject
            - s3:PutObject
            - s3:ListBucket
            Resource:
            - !Sub "arn:aws:s3:::${ArtifactBucket}"
            - !Sub "arn:aws:s3:::${ArtifactBucket}/*"
          - Effect: Allow
            Action:
            - cloudformation:*
            - iam:PassRole
            - iam:GetRole
            - iam:CreateRole
            - iam:DeleteRole
            - iam:PutRolePolicy
            - iam:DeleteRolePolicy
            - iam:AttachRolePolicy
            - iam:DetachRolePolicy
            - iam:GetRolePolicy
            - lambda:*
            - apigateway:*
            - dynamodb:*
            - cognito-idp:*
            - s3:*
            - bedrock:*
            - states:*
            - logs:*
            - events:*
            - sqs:*
            - ssm:*
            Resource: "*"

  StepFunctionsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      # Suppress CKV_AWS_111: Ensure IAM policies does not allow write access without constraints - Resources are constrained
      # Suppress CKV_AWS_109: Ensure IAM policies does not allow permissions management without constraints - Resources are constrained
      Policies:
        - PolicyName: StepFunctionsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                Resource: !GetAtt CodeBuildProject.Arn
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt CFNResponseFunction.Arn

  # STEP 2: Create CloudWatch Log Groups
  CFNResponseFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/CFNResponseFunction-${AWS::StackName}"
      RetentionInDays: 30

  BuildTriggerLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/BuildTriggerLambda-${AWS::StackName}"
      RetentionInDays: 30

  CodeBuildLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/codebuild/CDKDeployment-${AWS::StackName}"
      RetentionInDays: 30

  # STEP 3: Create SQS Dead Letter Queues
  CFNResponseDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "CFNResponseDLQ-${AWS::StackName}"
      MessageRetentionPeriod: 1209600  # 14 days
      # Using AWS managed key for SQS encryption
      KmsMasterKeyId: alias/aws/sqs

  BuildTriggerDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "BuildTriggerDLQ-${AWS::StackName}"
      MessageRetentionPeriod: 1209600  # 14 days
      # Using AWS managed key for SQS encryption
      KmsMasterKeyId: alias/aws/sqs

  # STEP 4: Create Lambda functions
  CFNResponseFunction:
    Type: AWS::Lambda::Function
    DependsOn: CFNResponseFunctionLogGroup
    Properties:
      FunctionName: !Sub "CFNResponseFunction-${AWS::StackName}"
      Handler: index.handler
      Runtime: python3.11
      Timeout: 30
      Role: !GetAtt CFNResponseRole.Arn
      ReservedConcurrentExecutions: 5
      DeadLetterConfig:
        TargetArn: !GetAtt CFNResponseDLQ.Arn
      Environment:
        Variables:
          STACK_NAME: !Ref AWS::StackName
      # Suppress W89: Lambda functions should be deployed inside a VPC - This is a simple utility function that doesn't need VPC access
      # Suppress W92: Lambda functions should define ReservedConcurrentExecutions - Already defined with value 5
      # Suppress CKV_AWS_117: Ensure that AWS Lambda function is configured inside a VPC - This is a simple utility function that doesn't need VPC access
      # Suppress CKV_AWS_173: Check encryption settings for Lambda environment variable - Using default encryption which is sufficient for this use case
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          import cfnresponse
          import traceback
          import logging

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):
              logger.info(f"Received event: {json.dumps(event)}")
              
              try:
                  # Extract parameters from the event
                  response_status = event.get('Status', 'FAILED')
                  physical_resource_id = event.get('PhysicalResourceId', context.log_stream_name)
                  reason = event.get('Reason', 'No reason provided')
                  response_data = event.get('Data', {})
                  
                  # Send response to CloudFormation
                  cfnresponse.send(
                      event, 
                      context, 
                      response_status, 
                      response_data, 
                      physical_resource_id,
                      reason=reason
                  )
                  
                  return {
                      'statusCode': 200,
                      'body': json.dumps('Response sent to CloudFormation')
                  }
              except Exception as e:
                  logger.error(f"Error: {str(e)}")
                  logger.error(traceback.format_exc())
                  
                  # Try to send a failure response
                  try:
                      cfnresponse.send(
                          event, 
                          context, 
                          cfnresponse.FAILED, 
                          {}, 
                          context.log_stream_name,
                          reason=str(e)
                      )
                  except Exception as send_error:
                      logger.error(f"Failed to send error response: {str(send_error)}")
                  
                  return {
                      'statusCode': 500,
                      'body': json.dumps(f'Error: {str(e)}')
                  }

  # STEP 5: Create S3 bucket for artifacts
  ArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "field-workforce-safety-artifacts-${AWS::AccountId}-${AWS::Region}"
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpiration:
              NoncurrentDays: 30
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7

  # STEP 6: Create BuildTriggerLambda
  BuildTriggerLambda:
    Type: AWS::Lambda::Function
    DependsOn: BuildTriggerLambdaLogGroup
    Properties:
      FunctionName: !Sub "BuildTriggerLambda-${AWS::StackName}"
      Handler: index.handler
      Runtime: python3.11
      Timeout: 60
      Role: !GetAtt BuildTriggerRole.Arn
      ReservedConcurrentExecutions: 5
      DeadLetterConfig:
        TargetArn: !GetAtt BuildTriggerDLQ.Arn
      Environment:
        Variables:
          STATE_MACHINE_ARN: !GetAtt BuildStateMachine.Arn
      # Suppress W89: Lambda functions should be deployed inside a VPC - This is a simple trigger function that doesn't need VPC access
      # Suppress W92: Lambda functions should define ReservedConcurrentExecutions - Already defined with value 5
      # Suppress CKV_AWS_117: Ensure that AWS Lambda function is configured inside a VPC - This is a simple trigger function that doesn't need VPC access
      # Suppress CKV_AWS_173: Check encryption settings for Lambda environment variable - Using default encryption which is sufficient for this use case
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          import uuid
          import logging

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):
              logger.info(f"Received event: {json.dumps(event)}")
              
              try:
                  # Get the state machine ARN from environment variables
                  state_machine_arn = os.environ['STATE_MACHINE_ARN']
                  
                  # Initialize Step Functions client
                  sfn_client = boto3.client('stepfunctions')
                  
                  # Start execution of the state machine
                  response = sfn_client.start_execution(
                      stateMachineArn=state_machine_arn,
                      name=f"BuildExecution-{uuid.uuid4()}",
                      input=json.dumps({
                          'StackName': os.environ.get('STACK_NAME', 'FieldWorkForceSafetyMainStack'),
                          'Parameters': {
                              'CollaboratorFoundationModel': event.get('CollaboratorFoundationModel', 'anthropic.claude-3-sonnet-20240229-v1:0'),
                              'SupervisorFoundationModel': event.get('SupervisorFoundationModel', 'anthropic.claude-3-sonnet-20240229-v1:0'),
                              'OpenWeatherApiKey': event.get('OpenWeatherApiKey', '')
                          }
                      })
                  )
                  
                  logger.info(f"Started execution: {response['executionArn']}")
                  
                  return {
                      'statusCode': 200,
                      'body': json.dumps({
                          'message': 'Build process started',
                          'executionArn': response['executionArn']
                      })
                  }
              except Exception as e:
                  logger.error(f"Error: {str(e)}")
                  return {
                      'statusCode': 500,
                      'body': json.dumps(f'Error: {str(e)}')
                  }

  # STEP 7: Create CodeBuild project
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    DependsOn: CodeBuildLogGroup
    Properties:
      TimeoutInMinutes: 60 
      Name: !Sub "CDKDeployment-${AWS::StackName}"
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      # Add encryption key using AWS-managed key for CodeBuild
      EncryptionKey: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/codebuild"
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: COLLABORATOR_FOUNDATION_MODEL
            Value: !Ref CollaboratorFoundationModel
          - Name: SUPERVISOR_FOUNDATION_MODEL
            Value: !Ref SupervisorFoundationModel
          - Name: OPENWEATHER_API_KEY
            Value: !Ref OpenWeatherApiKey
            Type: PLAINTEXT
      Source:
        Type: GITHUB
        Location: https://github.com/panbishnoi/field-workforce-safety-ai-assistant.git
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                python: 3.11
                nodejs: 18
              commands:
                - echo Installing dependencies...
                - npm install -g aws-cdk
                - cd cdk
                - python -m pip install --upgrade pip
                - pip install -r requirements.txt
            build:
              commands:
                - echo Starting CDK deployment...
                - cdk bootstrap
                - cdk deploy FieldWorkForceSafetyMainStack --require-approval never --context openweather_api_key=$OPENWEATHER_API_KEY --context collaborator_foundation_model=$COLLABORATOR_FOUNDATION_MODEL --context supervisor_foundation_model=$SUPERVISOR_FOUNDATION_MODEL
            post_build:
              commands:
                - echo Deployment completed on `date`
          artifacts:
            files:
              - '**/*'
            base-directory: 'cdk'
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Ref CodeBuildLogGroup
          Status: ENABLED

  # STEP 8: Create Step Functions state machine
  BuildStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub "FieldWorkforceSafetyBuildProcess-${AWS::StackName}"
      RoleArn: !GetAtt StepFunctionsRole.Arn
      Definition:
        Comment: "State machine to orchestrate the build and deployment process"
        StartAt: StartBuild
        States:
          StartBuild:
            Type: Task
            Resource: "arn:aws:states:::codebuild:startBuild"
            Parameters:
              ProjectName: !Ref CodeBuildProject
            Next: WaitForBuild
          WaitForBuild:
            Type: Wait
            Seconds: 10
            Next: CheckBuildStatus
          CheckBuildStatus:
            Type: Task
            Resource: "arn:aws:states:::codebuild:batchGetBuilds"
            Parameters:
              Ids.$: "States.Array($.Build.Id)"
            Next: EvaluateBuildStatus
          EvaluateBuildStatus:
            Type: Choice
            Choices:
              - Variable: "$.Builds[0].BuildStatus"
                StringEquals: "SUCCEEDED"
                Next: BuildSucceeded
              - Variable: "$.Builds[0].BuildStatus"
                StringEquals: "FAILED"
                Next: BuildFailed
              - Variable: "$.Builds[0].BuildStatus"
                StringEquals: "STOPPED"
                Next: BuildFailed
            Default: WaitForBuild
          BuildSucceeded:
            Type: Task
            Resource: "arn:aws:states:::lambda:invoke"
            Parameters:
              FunctionName: !GetAtt CFNResponseFunction.Arn
              Payload:
                Status: "SUCCESS"
                Reason: "Build completed successfully"
                Data:
                  BuildId.$: "$.Builds[0].Id"
                  BuildStatus: "SUCCEEDED"
            End: true
          BuildFailed:
            Type: Task
            Resource: "arn:aws:states:::lambda:invoke"
            Parameters:
              FunctionName: !GetAtt CFNResponseFunction.Arn
              Payload:
                Status: "FAILED"
                Reason.$: "States.Format('Build failed with status: {}', $.Builds[0].BuildStatus)"
                Data:
                  BuildId.$: "$.Builds[0].Id"
                  BuildStatus.$: "$.Builds[0].BuildStatus"
            End: true

Outputs:
  ArtifactBucketName:
    Description: "Name of the S3 bucket for artifacts"
    Value: !Ref ArtifactBucket
    Export:
      Name: !Sub "${AWS::StackName}-ArtifactBucket"
  
  BuildTriggerLambdaArn:
    Description: "ARN of the Lambda function to trigger the build process"
    Value: !GetAtt BuildTriggerLambda.Arn
    Export:
      Name: !Sub "${AWS::StackName}-BuildTriggerLambda"
  
  BuildStateMachineArn:
    Description: "ARN of the Step Functions state machine for the build process"
    Value: !Ref BuildStateMachine
    Export:
      Name: !Sub "${AWS::StackName}-BuildStateMachine"
