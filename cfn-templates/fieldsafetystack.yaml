Description: 'Field Safety Deployment Stack'

Parameters:
  CollaboratorFoundationModel:
    Type: String
    Default: "anthropic.claude-3-sonnet-20240229-v1:0"
    Description: "Foundation model for the collaborator agent"
    ConstraintDescription: "Collaborator foundation model is required"
    AllowedPattern: ".+"
    
  SupervisorFoundationModel:
    Type: String
    Default: "anthropic.claude-3-sonnet-20240229-v1:0"
    Description: "Foundation model for the supervisor agent"
    ConstraintDescription: "Supervisor foundation model is required"
    AllowedPattern: ".+"
    
  OpenWeatherApiKey:
    Type: String
    Description: "API key for OpenWeather service"
    NoEcho: true
    ConstraintDescription: "OpenWeather API key is required"
    AllowedPattern: ".+"
    
  DeployFrontend:
    Type: String
    Default: "yes"
    Description: "Deploy the frontend and backend stacks (yes/no)"
    AllowedValues:
      - "yes"
      - "no"

Resources:
  # STEP 1: Create all log groups first
  CodeBuildLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub "/aws/codebuild/FieldSafetyCodeBuild-${AWS::StackName}"
      RetentionInDays: 7

  CFNResponseFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub "/aws/lambda/CFNResponseFunction-${AWS::StackName}"
      RetentionInDays: 7

  BuildTriggerLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub "/aws/lambda/BuildTriggerLambda-${AWS::StackName}"
      RetentionInDays: 7
      
  StepFunctionsLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub "/aws/states/${AWS::StackName}-BuildStateMachine"
      RetentionInDays: 7

  # STEP 2: Create all IAM roles
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: CDKBootstrapPermissions1
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: "*"
            Resource: "*"

  StepFunctionsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StepFunctionsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - "codebuild:StartBuild"
                - "codebuild:BatchGetBuilds"
                - "lambda:InvokeFunction"
                - "states:CreateStateMachine"
                - "states:DeleteStateMachine"
                - "states:DescribeStateMachine"
                - "states:StartExecution"
                - "states:StopExecution"
                - "states:DescribeExecution"
                - "states:GetExecutionHistory"
              Resource: 
                - "*"
        - PolicyName: StepFunctionsAdditionalPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - "events:PutRule"
                - "events:PutTargets"
                - "events:DescribeRule"
                - "events:DeleteRule"
                - "events:RemoveTargets"
                - "iam:PassRole"
                - "iam:GetRole"
              Resource: "*"

  CFNResponseRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  BuildTriggerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: StepFunctionsStartExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: states:StartExecution
                Resource: "*"
        - PolicyName: CloudFormationDeleteStack
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:DeleteStack
                  - cloudformation:ListStacks
                  - cloudformation:DescribeStacks
                Resource: "*"

  # STEP 3: Create CodeBuild project
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    DependsOn: CodeBuildLogGroup
    Properties:
      TimeoutInMinutes: 60 
      Name:
        Fn::Sub: FieldSafetyCodeBuild-${AWS::StackName}
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        ComputeType: BUILD_GENERAL1_LARGE
        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: GITHUB_REPO
            Value: "https://github.com/panbishnoi/field-workforce-safety-ai-assistant.git"
          - Name: BUILD_TIMEOUT
            Value: "60"
          - Name: AWS_ACCOUNT_ID
            Value: !Sub '${AWS::AccountId}'
          - Name: AWS_REGION
            Value: !Sub '${AWS::Region}'
          - Name: STACK_ID
            Value: !Sub '${AWS::StackId}'
          - Name: OPENWEATHER_API_KEY
            Value: !Ref OpenWeatherApiKey
          - Name: COLLABORATOR_FOUNDATION_MODEL
            Value: !Ref CollaboratorFoundationModel
          - Name: SUPERVISOR_FOUNDATION_MODEL
            Value: !Ref SupervisorFoundationModel
          - Name: DEPLOY_FRONTEND
            Value: !Ref DeployFrontend
      ServiceRole:
        Fn::GetAtt:
          - CodeBuildServiceRole
          - Arn
      Source:
        Type: NO_SOURCE
        BuildSpec: |
          version: 0.2
          env:
            variables:
              NEXT_TELEMETRY_DISABLED: "1"
          phases:
            install:
              runtime-versions:
                nodejs: 18
                python: 3.11
              commands:
                - echo "Installing dependencies..."
                - pip install --upgrade pip
                - pip install requests boto3
                - npm install -g aws-cdk
                - cdk --version
            pre_build:
              commands:
                - echo "Cloning repository..."
                - git clone $GITHUB_REPO
                - cd field-workforce-safety-ai-assistant
            build:
              commands:
                - export NODE_OPTIONS="--max_old_space_size=4096" # Increase Node.js memory limit
                - echo "Building project..."
                - cd cdk
                - pip install -r requirements.txt
                - aws ecr-public get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin public.ecr.aws
                - cdk bootstrap aws://$AWS_ACCOUNT_ID/$AWS_REGION
                - cdk deploy FieldWorkForceSafetyMainStack --require-approval never --context openweather_api_key="$OPENWEATHER_API_KEY" --context collaborator_foundation_model="$COLLABORATOR_FOUNDATION_MODEL" --context supervisor_foundation_model="$SUPERVISOR_FOUNDATION_MODEL" --context deploy_frontend="$DEPLOY_FRONTEND"
                - echo "Build completed successfully"
            post_build:
              commands:
                - echo "Deployment process completed"
          cache:
            paths:
              - .npm/**/*
              - node_modules/**/*
              - /root/.npm/**/*
              - /root/.cache/yarn/**/*

  # STEP 4: Create Lambda functions
  CFNResponseFunction:
    Type: AWS::Lambda::Function
    DependsOn: CFNResponseFunctionLogGroup
    Properties:
      FunctionName: !Sub "CFNResponseFunction-${AWS::StackName}"
      Handler: index.handler
      Runtime: python3.11
      Timeout: 30
      Role: !GetAtt CFNResponseRole.Arn
      Code:
        ZipFile: |
          import json
          import urllib3
          
          SUCCESS = "SUCCESS"
          FAILED = "FAILED"
          
          def send(event, context, response_status, response_data):
              # Ensure BuildStatus is included in the response data
              if 'BuildStatus' not in response_data:
                  if response_status == SUCCESS:
                      response_data['BuildStatus'] = 'COMPLETED'
                  else:
                      response_data['BuildStatus'] = 'FAILED'
              
              response_body = {
                  'Status': response_status,
                  'Reason': 'See the details in CloudWatch Log Stream: ' + context.log_stream_name,
                  'PhysicalResourceId': event.get('PhysicalResourceId', context.log_stream_name),
                  'StackId': event['StackId'],
                  'RequestId': event['RequestId'],
                  'LogicalResourceId': event['LogicalResourceId'],
                  'Data': response_data
              }
              
              http = urllib3.PoolManager()
              try:
                  response = http.request(
                      'PUT',
                      event['ResponseURL'],
                      body=json.dumps(response_body).encode('utf-8'),
                      headers={'Content-Type': 'application/json'}
                  )
                  print(f"Status code: {response.status}")
              except Exception as e:
                  print(f"Error sending response: {str(e)}")
                  raise
          
          def handler(event, context):
              try:
                  print(f"Received event: {json.dumps(event)}")
                  status = SUCCESS if event.get('Status') == 'SUCCESS' else FAILED
                  
                  # Prepare response data with BuildStatus
                  response_data = {
                      'BuildId': event.get('PhysicalResourceId'),
                      'BuildStatus': 'COMPLETED' if status == SUCCESS else 'FAILED'
                  }
                  
                  # Include any additional data from the event
                  if 'Data' in event and isinstance(event['Data'], dict):
                      for key, value in event['Data'].items():
                          response_data[key] = value
                  
                  send(event, context, status, response_data)
              except Exception as e:
                  print(f"Error in handler: {str(e)}")
                  send(event, context, FAILED, {
                      'Error': str(e),
                      'BuildStatus': 'FAILED'
                  })

  # STEP 5: Create Step Functions state machine
  BuildStateMachine:
    Type: AWS::StepFunctions::StateMachine
    DependsOn: StepFunctionsLogGroup
    Properties:
      StateMachineName: !Sub "${AWS::StackName}-BuildStateMachine"
      DefinitionString: !Sub |
        {
          "Comment": "State machine for managing CodeBuild deployment",
          "StartAt": "StartBuild",
          "States": {
            "StartBuild": {
              "Type": "Task",
              "Resource": "arn:aws:states:::codebuild:startBuild.sync",
              "Parameters": {
                "ProjectName": "${CodeBuildProject}"
              },
              "Next": "CheckBuildStatus"
            },
            "CheckBuildStatus": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.Build.BuildStatus",
                  "StringEquals": "SUCCEEDED",
                  "Next": "Success"
                },
                {
                  "Variable": "$.Build.BuildStatus",
                  "StringEquals": "FAILED",
                  "Next": "Fail"
                }
              ],
              "Default": "Fail"
            },
            "Success": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${CFNResponseFunction.Arn}",
                "Payload": {
                  "RequestType.$": "$$.Execution.Input.RequestType",
                  "RequestId.$": "$$.Execution.Input.RequestId",
                  "StackId.$": "$$.Execution.Input.StackId",
                  "LogicalResourceId.$": "$$.Execution.Input.LogicalResourceId",
                  "PhysicalResourceId.$": "$.Build.Id",
                  "ResponseURL.$": "$$.Execution.Input.ResponseURL",
                  "ResourceType.$": "$$.Execution.Input.ResourceType",
                  "ResourceProperties.$": "$$.Execution.Input.ResourceProperties",
                  "Status": "SUCCESS",
                  "Data": {
                    "BuildId.$": "$.Build.Id",
                    "BuildArn.$": "$.Build.Arn",
                    "BuildStatus": "COMPLETED",
                    "BuildResult.$": "$.Build.BuildStatus"
                  }
                }
              },
              "End": true
            },
            "Fail": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${CFNResponseFunction.Arn}",
                "Payload": {
                  "RequestType.$": "$$.Execution.Input.RequestType",
                  "RequestId.$": "$$.Execution.Input.RequestId",
                  "StackId.$": "$$.Execution.Input.StackId",
                  "LogicalResourceId.$": "$$.Execution.Input.LogicalResourceId",
                  "PhysicalResourceId.$": "$.Build.Id",
                  "ResponseURL.$": "$$.Execution.Input.ResponseURL",
                  "ResourceType.$": "$$.Execution.Input.ResourceType",
                  "ResourceProperties.$": "$$.Execution.Input.ResourceProperties",
                  "Status": "FAILED",
                  "Data": {
                    "BuildId.$": "$.Build.Id",
                    "BuildArn.$": "$.Build.Arn",
                    "BuildStatus": "FAILED",
                    "BuildResult.$": "$.Build.BuildStatus",
                    "FailureReason.$": "States.Format('Build failed: {}', $.Build.Phases[?(@.PhaseStatus == 'FAILED')].Contexts[0].Message)"
                  }
                }
              },
              "End": true
            }
          }
        }
      RoleArn: !GetAtt StepFunctionsRole.Arn

  # STEP 6: Create BuildTriggerLambda
  BuildTriggerLambda:
    Type: AWS::Lambda::Function
    DependsOn: BuildTriggerLambdaLogGroup
    Properties:
      FunctionName: !Sub "BuildTriggerLambda-${AWS::StackName}"
      Handler: index.handler
      Runtime: python3.11
      Timeout: 60
      Role: !GetAtt BuildTriggerRole.Arn
      Environment:
        Variables:
          STATE_MACHINE_ARN: !GetAtt BuildStateMachine.Arn
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          import urllib3
          
          def handler(event, context):
              print(f"Received event: {json.dumps(event)}")  # Log the input
              
              physical_id = event.get('PhysicalResourceId', 'BuildTrigger')
              
              # For Delete requests, delete the FieldWorkForceSafetyMainStack and send a response
              if event.get('RequestType') == 'Delete':
                  try:
                      # Delete the CDK-deployed stack
                      cfn = boto3.client('cloudformation')
                      
                      # Check if the stack exists before attempting to delete
                      try:
                          cfn.describe_stacks(StackName="FieldWorkForceSafetyMainStack")
                          print("Deleting FieldWorkForceSafetyMainStack...")
                          cfn.delete_stack(StackName="FieldWorkForceSafetyMainStack")
                          print("Delete request for FieldWorkForceSafetyMainStack sent successfully")
                      except cfn.exceptions.ClientError as e:
                          # If the stack doesn't exist, that's fine
                          if "does not exist" in str(e):
                              print("FieldWorkForceSafetyMainStack does not exist, nothing to delete")
                          else:
                              print(f"Error checking stack: {str(e)}")
                  except Exception as e:
                      print(f"Error deleting FieldWorkForceSafetyMainStack: {str(e)}")
                      # Continue with the response even if there was an error
                  
                  # Send success response for the custom resource
                  send_cfn_response(event, context, 'SUCCESS', {
                      'BuildStatus': 'DELETED'
                  }, physical_id)
                  return
              
              try:
                  sfn = boto3.client('stepfunctions')
                  
                  # Start the state machine with the CloudFormation custom resource event
                  response = sfn.start_execution(
                      stateMachineArn=os.environ['STATE_MACHINE_ARN'],
                      input=json.dumps(event)
                  )
                  print(f"Started execution: {response['executionArn']}")
                  
                  # For Create/Update, we DO NOT send a response here
                  # The state machine will send the response after the build completes
                  # This makes CloudFormation wait for the build to complete
                  
                  # DO NOT return anything here - this is important!
                  # Just let the Lambda function complete without sending a response
                  
              except Exception as e:
                  print(f"Error starting state machine: {str(e)}")
                  # If there's an error starting the state machine, send a failure response
                  send_cfn_response(event, context, 'FAILED', {
                      'Error': str(e),
                      'BuildStatus': 'FAILED'
                  }, physical_id)
          
          # Helper function to send CloudFormation response
          def send_cfn_response(event, context, response_status, response_data, physical_resource_id=None):
              response_body = {
                  'Status': response_status,
                  'Reason': 'See the details in CloudWatch Log Stream: ' + context.log_stream_name,
                  'PhysicalResourceId': physical_resource_id or context.log_stream_name,
                  'StackId': event['StackId'],
                  'RequestId': event['RequestId'],
                  'LogicalResourceId': event['LogicalResourceId'],
                  'Data': response_data
              }
              
              http = urllib3.PoolManager()
              try:
                  response = http.request(
                      'PUT',
                      event['ResponseURL'],
                      body=json.dumps(response_body).encode('utf-8'),
                      headers={'Content-Type': 'application/json'}
                  )
                  print(f"Status code: {response.status}")
              except Exception as e:
                  print(f"Error sending response: {str(e)}")
                  raise

  # STEP 7: Create the custom resource
  BuildTrigger:
    Type: Custom::BuildTrigger
    Properties:
      ServiceToken: !GetAtt BuildTriggerLambda.Arn

Outputs:
  DeploymentStatus:
    Description: Status of the deployment
    Value: !GetAtt BuildTrigger.BuildStatus
  CodeBuildProjectName:
    Description: Name of the CodeBuild project
    Value: !Ref CodeBuildProject
  StateMachineArn:
    Description: ARN of the Step Functions state machine
    Value: !Ref BuildStateMachine
